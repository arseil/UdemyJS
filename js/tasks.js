/* 
    Задачи:

    При помощи цикла выведите числа от 5 до 10 в консоль. 5 и 10 включительно. Цикл можно использовать любой

    При помощи цикла for вывести числа от 20 до 10 в консоль. В обратном порядке (20, 19, 18...). Когда цикл дойдет до числа 13 - остановить весь цикл

    При помощи цикла for выведите чётные числа от 2 до 10 включительно

    Перепишите цикл  for на вариант с while. Результат должен остаться точно таким же. Не создайте бесконечный цикл! Иначе браузер может зависнуть.

    Цикл, который нужно переписать:
    
    for (let i = 2; i <= 16; i++) {
        if (i % 2 === 0) {
            continue;
        } else {
            console.log(i);
        }
    }
    Заполните массив цифрами от 5 до 10 включительно. Помните, что элементы массива можно сформировать так же, как и обращаться к ним: arr[0] 
*/

// Место для первой задачи
function firstTask() {
    // Пишем решение вот тут
    for (let i = 5; i <= 10; i++) {
        console.log(i)
    }
}

// Место для второй задачи
function secondTask() {
    // Пишем решение вот тут
    for (let i = 20; i >= 10; i--) {
        if (i === 13) break;
        console.log(i)
    }
    
}

// Место для третьей задачи
function thirdTask() {
    // Пишем решение вот тут
    for (let i = 1; i <= 10; i++) {
        if (i % 2 === 0) console.log(i);
    }
    
}

// Место для четвертой задачи

// Цикл, который нужно переписать:

// for (let i = 2; i <= 16; i++) {
//     if (i % 2 === 0) {
//         continue;
//     } else {
//         console.log(i);
//     }
// }

function fourthTask() {
    // Пишем решение вот тут
    let i = 2;
    while (i < 16) {
        i++;
    	if (i % 2 === 0) {
    		continue;
    	} else {
    		console.log(i);
    	}
	}
}

// Место для пятой задачи

function fifthTask() {
	const arrayOfNumbers = [];

	// Пишем решение вот тут
	for (let i = 5; i <= 10; i++) {
		arrayOfNumbers[i - 5] = i;
	}
	
	// Не трогаем
	return arrayOfNumbers;
}
console.log(fifthTask());

/* 
    Задачи:

    Заполните новый массив (result) числами из старого (arr). Количество элементов в массиве можно получить как arr.length, а к элементам обращаемся все так же: arr[0], arr[1] и тд.
    Должен получиться точно такой же массив

    Измените данный массив так, чтобы все числа были увеличены в 2 раза, а если попадается строка строка - то к ней было добавлено " - done".
    Для определения типа данных используйте typeof();
    Должно получиться: [ 10, 20, 'Shopping - done', 40, 'Homework - done' ]

    Разверните массив data наоборот при помощи цикла и запишите данные в массив result.
    Должно получиться: [ 'Homework', 20, 'Shopping', 10, 5 ] 
*/

// Место для первой задачи
function firstTask() {
    // Значения массива менять нельзя, тут он проверяется автоматически именно на эти значения
    const arr = [3, 5, 8, 16, 20, 23, 50];
    const result = [];

    // Пишем решение вот тут
    for (let i = 0; i < arr.length; i++) {
		result[i] = arr[i];
	}
    
    // Не трогаем
    return result;
}

// Место для второй задачи
function secondTask() {
    // Значения массива менять нельзя, тут он проверяется автоматически именно на эти значения
    const data = [5, 10, 'Shopping', 20, 'Homework'];

    // Пишем решение вот тут
    for (let i = 0; i < data.length; i++) {
		if (typeof (data[i]) === "string") {
			data[i] += " - done";
		} else {
			data[i] = data[i] * 2;
		}
		}	
    
    // Не трогаем
    return data;
}

// Место для третьей задачи
function thirdTask() {
    // Значения массива менять нельзя, тут он проверяется автоматически именно на эти значения
    const data = [5, 10, 'Shopping', 20, 'Homework'];
    const result = [];

    // Пишем решение вот тут
    for (let i = 1; i <= data.length; i++) {
		result[i - 1] = data[data.length - i];
	}
    
    // Не трогаем
    return result;
}

/* 
    (**) Задача на формирование фигуры
    Это одна из классических задач в программировании на формирование самых разных фигур при помощи кода. Вы спросите, а зачем это вообще нужно? Ответов несколько:

    Существуют реальные задачи, когда вы кодом строите геометрию, символы и другие нужные вещи. Вспомните простые электронные табло на улицах, например

    Это хорошо прокачивает логику и разминает мозг

    Позволяет запомнить нюансы работы языка

    Иногда можно встретить просто нереальные вещи, построенные только при помощи кода. Но мы с вами займемся базовой фигурой. Сейчас вам необходимо написать код, который при помощи звездочек (*) в консоли нарисует вот такую фигуру:

        *
        ***
    *****
    *******
    *********
    ***********
    (Подсказка: в конце фигуры есть перенос строки \n, который тоже учитывается в тестах. В КОНЦЕ КАЖДОЙ СТРОКИ НЕТ ПРОБЕЛОВ, ТОЛЬКО ПЕРЕНОС) 
*/

const lines = 5;
let result = '';
// Проверяется именно переменная result, формируйте строку в ней
for (let i = 0; i <= lines; i++) {
	for (let j = lines - i; j >= 1; j--) {
		result += " ";
	}
	for (let k = 0; k <= i; k++) {
		result += "*";
		for (let l = 1; l <= k; l++) {
			if (l === 2) break;
			result += "*";
		}
	}
	result += "\n";
}
console.log(result);

/* 
    Задачи:

    1) Создайте функцию, которая будет вычислять объем и площадь полной поверхности куба (тоже базовая математика, иногда используется в создании анимаций). Эта функция принимает в себя целое число со значением длины ребра куба. Ответ выведите в формате строки, который изображен в примерах.

    Если в функцию попал неправильный аргумент или вычислить значения невозможно - вернуть строку "При вычислении произошла ошибка"

    НЕ ИСПОЛЬЗУЙТЕ ОПЕРАТОР СТЕПЕНИ ** - в онлайн среде браузера он не работает и тесты будут ломаться. Это из-за того, что этот оператор из более нового стандарта, чем тут доступен.

    Примеры:

    calculateVolumeAndArea(5)  => 'Объем куба: 125, площадь всей поверхности: 150'

    calculateVolumeAndArea(15)  => 'Объем куба: 3375, площадь всей поверхности: 1350'

    calculateVolumeAndArea(15.5)  => 'При вычислении произошла ошибка'

    calculateVolumeAndArea('15')  => 'При вычислении произошла ошибка'

    calculateVolumeAndArea(-15)  => 'При вычислении произошла ошибка'

    2) Постепенно переходим к более реалистичным задачам :) Вы обнаружите, что там используется все тоже самое.

    Напишите функцию, которая будет определять номер купе по переданному ей номеру места. Наглядно:

    Функция принимает только целое число от 1 до 36.

    Если переданный аргумент не число, отрицательное или дробное - возвращается сообщение:

    "Ошибка. Проверьте правильность введенного номера места"

    Если число 0 или больше 36, то сообщение: "Таких мест в вагоне не существует"

    Пример:

    getCoupeNumber(33)  => 9

    getCoupeNumber(7)  => 2

    getCoupeNumber(300)  => "Таких мест в вагоне не существует"

    getCoupeNumber(0)  => "Таких мест в вагоне не существует"

    getCoupeNumber(7.7)  => "Ошибка. Проверьте правильность введенного номера места"

    getCoupeNumber(-10)  => "Ошибка. Проверьте правильность введенного номера места"

    getCoupeNumber('Hello')  => "Ошибка. Проверьте правильность введенного номера места" 
*/

function calculateVolumeAndArea(a) {
    if (typeof(a) != "number" || a % 1 != 0 || a < 0) {
        return "При вычислении произошла ошибка";
    }
    let volume = a * a * a;
    let area = 6 * (a * a);
    // console.log(typeof a);
    return `Объем куба: ${volume}, площадь всей поверхности: ${area}`;
}
console.log(calculateVolumeAndArea(-12.2));

function getCoupeNumber(a) {
    if (typeof(a) != "number" || a % 1 !== 0 || a < 0) return "Ошибка. Проверьте правильность введенного номера места";
    if (a === 0 || a > 36) return "Таких мест в вагоне не существует";
    return Math.ceil(a / 4);
}
console.log(getCoupeNumber(33));

/* 
    Задачи:

    1) Создайте функцию, которая принимает в себя целое число минут и возвращает время в нужном формате строки. (Смотри пример). Обратите внимание на окончание слова "час" - оно меняется в зависимости от цифры. Если вместо аргумента приходит не число, дробное или отрицательное число - функция возвращает строку "Ошибка, проверьте данные"

    Внимание! Давайте пока ограничимся максимум 600ю минутами (10 часов). Так как проверки на большие числа будут раздувать код (33 часа, 31 час, 11 часов и тд). Этого будет достаточно и код будет проверять именно этот промежуток (1 - 10 часов). Но вы можете реализовать и полный скрипт, он тоже должен проходить тесты.

    Пример:

    getTimeFromMinutes(150) => "Это 2 часа и 30 минут"

    getTimeFromMinutes(50) => "Это 0 часов и 50 минут"

    getTimeFromMinutes(0) => "Это 0 часов и 0 минут"

    getTimeFromMinutes(-150) => "Ошибка, проверьте данные"

    2) Напишите функцию, которая принимает в себя 4 числа и возвращает самое большее из них. Если один из аргументов не является числом или их меньше 4 - возвращается 0. Дробные числа разрешены.

    Пример:

    findMaxNumber(1, 5, 6.6, 11); =>  11

    findMaxNumber(1, 5, '6', '10');  =>  0 
*/

function getTimeFromMinutes(a) {
    if (typeof(a) != "number" || a % 1 !== 0 || a < 0) return "Ошибка, проверьте данные";
    let hours = 0;
    let minutes = 0;
    let wordHour = "часов";
    if (a <= 59 && a >= 0) {
        minutes += a;
    } else {
        hours = Math.floor(a / 60);
        minutes = a % 60;
    }
    if (hours == 1) {
        wordHour = 'час';
    } else if (hours >= 2 && hours <= 4) {
        wordHour = 'часа';
    }
    return `Это ${hours} ${wordHour} и ${minutes} минут`;
}
console.log(getTimeFromMinutes(2500));

function findMaxNumber(a, b, c, d) {
    let arr = [a, b, c, d];
    // return console.log(arr.length);
    for (let i = 0; i < arr.length; i++) {
        if (typeof(arr[i]) != 'number' || arr.length < 3) return 0;
    }
    // if (typeof(a) != "number" || a < 0) return 0;
    if (a > b && a > c && a > d) return a;
    if (b > a && b > c && b > d) return b;
    if (c > a && c > b && c > d) return c;
    if (d > a && d > b && d > c) return d;
}
// console.log(typeof(findMaxNumber()));
console.log(findMaxNumber(1, "s", 80, 230));

/* 
    (**) Задача с собеседований на числа Фибоначчи
    Это одна из классических задач в программировании на самых разных языках. Скорее всего вы слышали про числа Фибоначчи, где первые два числа равны 0 и 1, а каждое последующее число равно сумме двух предыдущих чисел. И на собеседованиях часто дают задачи, связанные с этими числами. Есть разные вариации и тут мы попробуем решить одну из них.

    Сразу скажу, что есть варианты решения через прием, называемый рекурсия. Он дальше по курсу. Но этот вариант нужно решить без её применения. Такие условия часто ставят на собеседованиях. Когда вы пройдете урок по рекурсии, вы можете вернуться в это задание и попробовать решить по другому. Так же подсказку (но не решение этой задачи) можно найти тут. Но постарайтесь не открывать 🙂

    Задача:

    Создайте функцию, которая будет принимать в себя один аргумент-целое положительное число. Она должна возвращать строку, в которой будут через пробел выведены числа Фибоначчи. Причем, их количество должно быть равно переданному аргументу.

    Если переданный аргумент не число - вернуть пустую строку. Решать без применения рекурсии.

    Пример:

    fib(4) => ''0 1 1 2"

    fib(7) => ''0 1 1 2 3 5 8"

    fib('7') => ''"

    fib(1) => "0"

    fib(0) => ''"

    Задача непростая для новичков, так что с первого раза может не получится. 
*/

function fib(a) {
    let str = '';
    let arr = [0, 1];
    if (typeof(a) != 'number' || a === 0 || a % 1 !== 0) return str;
    if (a === 1) return str += 0;
    for (let i = 2; i < a; i++) {
        arr[i] = arr[i - 1] + arr[i - 2];
    }
    for (let j = 0; j < arr.length; j++) {
        str += arr[j];
        if (j < a - 1) str += " ";
    }
    return str;
}

console.log(fib(7.3));


/* 
Задачи:

1) Напишите функцию showExperience, которая будет принимать в себя объект со всеми данными и возвращать строку с опытом.

Пример:

showExperience(personalPlanPeter) => '1 month'

P.S. желательно использовать деструктуризацию, но не обязательно

2) Напишите функцию showProgrammingLangs, которая будет принимать в себя объект со всеми данными и возвращать строку в нужном виде.

Пример:

showProgrammingLangs(personalPlanPeter)  =>

"Язык js изучен на 20% Язык php изучен на 10%"

Причем функция должна работать вне зависимости от количества языков. Если ни один не указан, то возвращается пустая строка.

P.S. Для переноса строки используется \n в конце строки.

3) Создайте метод showAgeAndLangs внутри объекта personalPlanPeter. При его вызове метод будет принимать в себя объект и возвращать строку в нужном виде.

Пример:

personalPlanPeter.showAgeAndLangs(personalPlanPeter)
=> 'Мне 29 и я владею языками: RU ENG'

Заметьте, что возраст и языки подставляются автоматически из объекта, а языки всегда в верхнем регистре (большими буквами). Если данные в объекте поменяются, то и сообщение тоже изменится. 
*/

const personalPlanPeter = {
    name: "Peter",
    age: "29",
    skills: {
        languages: ['ru', 'eng'],
        programmingLangs: {
            js: '20%',
            php: '10%'
        },
        exp: '1 month'
    },
    showAgeAndLangs: function(plan) {
        let {languages} = plan.skills;
        let str = '';
        for (let value of languages) {
            str += `${value.toUpperCase()} `;
        }
        return `Мне ${plan.age} и я владею языками: ${str}`;
    }
};

function showExperience(plan) {
    let {exp} = plan.skills;
    return exp;
}
console.log(showExperience(personalPlanPeter))

function showProgrammingLangs(plan) {
    let {programmingLangs} = plan.skills;
    let str = ''
    for (let key in programmingLangs) {
        str += `Язык ${key} изучен на ${programmingLangs[key]}\n`;
    }
    return str;
}

console.log(showProgrammingLangs(personalPlanPeter))

function showAgeAndLangs(personalPlanPeter) {
    let {languages} = personalPlanPeter.skills;
    let str = '';
    for (let value of languages) {
        str += `${value.toUpperCase()} `;
    }
    return `Мне ${personalPlanPeter.age} и я владею языками: ${str}`;
}
console.log(showAgeAndLangs(personalPlanPeter));


/* 
Задачи:

1) Напишите функцию showFamily, которая будет принимать в себя массив строк и возвращать сообщение в нужном формате.

showFamily(family)  => 'Семья состоит из: Peter Ann Alex Linda'

Имена подставляются автоматически из массива. Если массив пустой, то выводится сообщение 'Семья пуста'

2) напишите функцию standardizeStrings, которая будет принимать в себя массив строк и будет выводить в консоль эти строки в нижнем регистре.

Пример:

standardizeStrings(favoriteCities)  выведет в консоль

lisbon
rome
milan
dublin 
*/

const family = ['Peter', 'Ann', 'Alex', 'Linda'];

function showFamily(arr) {
    if (arr.length > 0) {
        return `Семья состоит из: ${arr.join(' ')}`
    } else {
        return `Семья пуста`
    }
}

console.log(showFamily(family));


const favoriteCities = ['liSBon', 'ROME', 'miLan', 'Dublin'];

function standardizeStrings(arr) {
    arr.forEach(item => console.log(item.toLowerCase()))
}
standardizeStrings(favoriteCities)


/* Продолжаем решение задач на массивы.

3) Задача с собеседований. Напишите функцию reverse, которая принимает в себя строку и возвращает эту строку в обратном порядке.

Пример:

const someString = 'This is some strange string';
reverse(someString) => 'gnirts egnarts emos si sihT'

Функцию можно применить к любой строке. Если в функцию приходит не строка - вернуть сообщение "Ошибка!"

Это очень интересная задача, которую можно решить несколькими способами. Её дают для того, чтобы оценить навыки и знания программиста, посмотреть как он думает. Как небольшая подсказка, есть метод, который может вам помочь. И часть дополнительных вариантов решения мы тоже изучим в течении курса.

Может показать сложной с первого взгляда, но это совсем не так 🙂

4) Представьте такую реальную ситуацию. У вас есть банкомат, который выдает деньги из двух разных банков в разных валютах. Один банк основной с базовыми валютами, второй дополнительный с прочими валютами:

const baseCurrencies = ['USD', 'EUR'];
const additionalCurrencies = ['UAH', 'RUB', 'CNY'];
Вам нужно создать главную функцию банкомата availableCurr, которая принимает два аргумента: первый - это массив со всеми доступными валютами из двух банков сразу (сейчас представим, что они не могут повторяться), второй - необязательный аргумент, который указывает ту валюту, которая сейчас закончилась в банкомате. Если массив в первом аргументе пустой - то функция возвращает строку 'Нет доступных валют'. Функция возвращает строку в нужном виде.

Пример:

availableCurr(['UAH', 'RUB', 'CNY'], 'CNY')
Вернет строку:

Доступные валюты:
UAH
RUB
Заметьте:

- CNY (юань) исчез из списка валют, значит такая валюта закончилась

- После валюты: стоит перенос строки \n, и после каждой валюты тоже. Это важно для тестов

- Данные для первого аргумента должны приходить сразу из двух банков, причем сначала baseCurrencies, потом additionalCurrencies по порядку 
*/


const someString = 'This is some strange string';

function reverse(str) {
    if (typeof(str) == "string") {
        return str.split('').reverse().join('');
    } else {
        return `Ошибка!`
    }
}

console.log(reverse(someString))

const baseCurrencies = ['USD', 'EUR'];
const additionalCurrencies = ['UAH', 'RUB', 'CNY'];

function availableCurr(arr, missingCurr) {

    if (!arr || arr.length === 0) return `Нет доступных валют`;

    let allCurr = [];
    let answer = `Доступные валюты:\n`;

    allCurr = allCurr.concat(baseCurrencies, additionalCurrencies);

    for (let i = 0; i < allCurr.length; i++) {

        for (let j = 0; j < arr.length; j++) {

            if (arr[j] === missingCurr) {
                continue;
            } else if (allCurr[i] === arr[j]) {
                answer += `${arr[j]}\n`;
            }

        }
    }

    return answer;
}

console.log(availableCurr([]))